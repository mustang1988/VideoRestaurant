@startuml Sequence Design

actor 发起端
entity 存储
entity RPC服务
database 数据库
queue 任务队列
entity 管理节点
entity 执行节点
queue 回调队列

autonumber

' 服务启动阶段
group 服务启动阶段
    activate 管理节点
    管理节点 -> 管理节点: 启动管理节点服务, 监听WebSocket端口
    activate 执行节点
    执行节点 -> 执行节点: 启动执行节点服务
    执行节点 -> 管理节点 : 打开WebSocket连接, 注册执行节点到管理节点
    管理节点 -> 管理节点 : 为注册的执行节点分配唯一ID
    管理节点 -> 数据库 : 持久化存储执行节点信息, 包括唯一ID, IP地址等
    管理节点 -> 执行节点 : 推送管理节点为其分配的唯一ID
end
' 服务启动阶段结束

' 任务创建阶段
group 任务创建阶段
    发起端 -> 存储 : 上传文件到存储
    发起端 -> RPC服务 : 请求执行转码
    RPC服务 -> RPC服务 : 创建转码任务, 为任务分配唯一ID, 状态: 排队中, 原始文件信息: null, 转码参数: null
    RPC服务 -> 数据库 : 任务数据持久化到数据库
    RPC服务 -> 任务队列 : 将任务信息放入任务队列
end
' 任务创建阶段结束

' 任务执行阶段
group 任务执行阶段
    管理节点 -> 任务队列 : 从任务队列中读取任务信息
    管理节点 -> 数据库 : 根据任务消息中的任务ID, 从数据库读取原始文件路径
    管理节点 -> 存储 : 根据查询到的原始文件路径, 从存储中读取原始文件信息
    管理节点 -> 数据库 : 根据任务ID, 将原始文件信息持久化到数据库
    管理节点 -> 管理节点 : 分析原始文件, 得到转码参数
    管理节点 -> 数据库 : 根据任务ID, 将转码参数, 持久化到数据库
    管理节点 -> 管理节点 : 将原始文件进行分片, 得到分片作业, 分片数量由当前已注册的空闲执行节点数量为准, 为每个分片作业创建唯一作业ID
    管理节点 -> 数据库: 将分片作业信息持久化到数据库
    管理节点 -> 执行节点: 通过WebSocket将分片作业发送到执行节点
    执行节点 -> 管理节点 : 收到作业指派后回报指派接收状态
    管理节点 -> 数据库 : 根据分片作业ID, 更新分片作业信息, 存储分片任务指派到的执行节点ID
    执行节点 -> 执行节点: 执行分片转码作业
    执行节点 -> 管理节点 : 作业完成后, 上报分片转码作业状态
    管理节点 -> 数据库: 根据分片作业ID更新数据库中的分片作业状态
    管理节点 -> 管理节点 : 合并分片转码作业的输出
    管理节点 -> 数据库: 根据任务ID更新数据库中的任务状态
    管理节点 -> 回调队列 : 将转码结果放入回调队列
end
' 任务执行阶段结束

' 回调阶段
group 回调阶段
    RPC服务 -> 回调队列 : 从回调队列中读取任务信息
    RPC服务 -> 数据库 : 根据任务ID, 从数据库读取转码结果和回调地址
    RPC服务 -> 发起端 : 通过回调地址发送任务结果到发起端
end
' 回调阶段结束

@enduml
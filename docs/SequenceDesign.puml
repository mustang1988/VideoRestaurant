@startuml Sequence Design

actor Client
entity Storage
entity Waiter
database Database
queue TaskQueue
entity Chef
entity Assistant
queue CallbackQueue

autonumber

' 服务启动阶段
group 服务启动阶段
    activate Chef
    Chef -> Chef: Start thread Chef启动Chef服务, 监听WebSocket端口
    activate Assistant
    Assistant -> Assistant: 启动Assistant服务
    Assistant -> Chef : 打开WebSocket连接, 注册Assistant到Chef
    Chef -> Chef : 为注册的Assistant分配唯一ID
    Chef -> Database : 持久化StorageAssistant信息, 包括唯一ID, IP地址等
    Chef -> Assistant : 推送Chef为其分配的唯一ID
end
' 服务启动阶段结束

' 任务创建阶段
group 任务创建阶段
    Client -> Storage : 上传文件到Storage
    Client -> Waiter : 请求执行转码
    Waiter -> Waiter : 创建转码任务, 为任务分配唯一ID, 状态: 排队中, 原始文件信息: null, 转码参数: null
    Waiter -> Database : 任务数据持久化到Database
    Waiter -> TaskQueue : 将任务信息放入TaskQueue
end
' 任务创建阶段结束

' 任务执行阶段
group 任务执行阶段
    Chef -> TaskQueue : 从TaskQueue中读取任务信息
    Chef -> Database : 根据任务消息中的任务ID, 从Database读取原始文件路径
    Chef -> Storage : 根据查询到的原始文件路径, 从Storage中读取原始文件信息
    Chef -> Database : 根据任务ID, 将原始文件信息持久化到Database
    Chef -> Chef : 分析原始文件, 得到转码参数
    Chef -> Database : 根据任务ID, 将转码参数, 持久化到Database
    Chef -> Chef : 将原始文件进行分片, 得到分片作业, 分片数量由当前已注册的空闲Assistant数量为准, 为每个分片作业创建唯一作业ID
    Chef -> Database: 将分片作业信息持久化到Database
    Chef -> Assistant: 通过WebSocket将分片作业发送到Assistant
    Assistant -> Chef : 收到作业指派后回报指派接收状态
    Chef -> Database : 根据分片作业ID, 更新分片作业信息, Storage分片任务指派到的AssistantID
    Assistant -> Assistant: 执行分片转码作业
    Assistant -> Chef : 作业完成后, 上报分片转码作业状态
    Chef -> Database: 根据分片作业ID更新Database中的分片作业状态
    Chef -> Chef : 合并分片转码作业的输出
    Chef -> Database: 根据任务ID更新Database中的任务状态
    Chef -> CallbackQueue : 将转码结果放入CallbackQueue
end
' 任务执行阶段结束

' 回调阶段
group 回调阶段
    Waiter -> CallbackQueue : 从CallbackQueue中读取任务信息
    Waiter -> Database : 根据任务ID, 从Database读取转码结果和回调地址
    Waiter -> Client : 通过回调地址发送任务结果到Client
end
' 回调阶段结束

@enduml